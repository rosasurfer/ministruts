#
# Runs PHPStan, PHPCodeSniffer and PHPUnit on every supported PHP version.
# A tool is skipped if the commit message contains "[skip phpstan]", "[skip phpcs]" or "[skip phpunit]".
#
name: CI checks

on:
  push:
  pull_request:

permissions:
  contents: read

jobs:
  integration-checks:

    name: PHP ${{ matrix.php }}
    if:   ${{ !startsWith(github.ref, 'refs/tags/') }}      # skip the job if the push is just a tag
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ['7.4', '8.0', '8.1', '8.2', '8.3', '8.4']
      fail-fast: false                                      # don't cancel remaining jobs if one job fails

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0                                    # fetch all branches and history (to access the source branch of PRs)

      # ------------------------------------------------------------------------------------------------------------------------------------
      - name: Check commit message for "[skip <tool>]"
        run: |
          REF_NAME=
          [[ "$GITHUB_EVENT_NAME" == "push"         ]] && REF_NAME="$GITHUB_REF"
          [[ "$GITHUB_EVENT_NAME" == "pull_request" ]] && REF_NAME="origin/$GITHUB_HEAD_REF"
          [[ -z "$REF_NAME" ]] && { echo "ERROR: unsupported CI event: $GITHUB_EVENT_NAME"; exit 1; }

          COMMIT_MSG=$(git log -1 --format="%B" "$REF_NAME")

          SKIP_PHPSTAN=false
          grep -iq '\[skip phpstan\]' <<< "$COMMIT_MSG" && { echo "Magic commit message found: [skip phpstan]"; SKIP_PHPSTAN=true; }
          echo "Skip PHPStan: $SKIP_PHPSTAN"
          echo "SKIP_PHPSTAN=$SKIP_PHPSTAN" >> "$GITHUB_ENV"

          SKIP_PHPCS=false
          grep -iq '\[skip phpcs\]' <<< "$COMMIT_MSG" && { echo "Magic commit message found: [skip phpcs]"; SKIP_PHPCS=true; }
          echo "Skip PHPCodeSniffer: $SKIP_PHPCS"
          echo "SKIP_PHPCS=$SKIP_PHPCS" >> "$GITHUB_ENV"

          SKIP_PHPUNIT=false
          grep -iq '\[skip phpunit\]' <<< "$COMMIT_MSG" && { echo "Magic commit message found: [skip phpunit]"; SKIP_PHPUNIT=true; }
          echo "Skip PHPUnit: $SKIP_PHPUNIT"
          echo "SKIP_PHPUNIT=$SKIP_PHPUNIT" >> "$GITHUB_ENV"

      # ------------------------------------------------------------------------------------------------------------------------------------
      - name: Setup PHP ${{ matrix.php }}
        if:   env.SKIP_PHPSTAN == 'false' || env.SKIP_PHPCS == 'false' || env.SKIP_PHPUNIT == 'false'
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: none
        env:
          GITHUB_TOKEN: ${{ secrets.GH_OAUTH_TOKEN }}
          fail-fast: true                                   # don't try to continue on setup errors

      # ------------------------------------------------------------------------------------------------------------------------------------
      - name: Install Composer dependencies
        if:   env.SKIP_PHPSTAN == 'false' || env.SKIP_PHPCS == 'false' || env.SKIP_PHPUNIT == 'false'
        run: |
          echo "Validating \"composer.json\"..."
          composer validate --strict

          echo "Installing dependencies..."
          composer install --no-progress

      # ------------------------------------------------------------------------------------------------------------------------------------
      - name: Run PHPStan
        if:   env.SKIP_PHPSTAN == 'false'
        run: |
          echo "Generating PHPStan report..."
          bin/phpstan --no-progress -vvv

      # ------------------------------------------------------------------------------------------------------------------------------------
      - name: Run PHPCodeSniffer
        if:   env.SKIP_PHPCS == 'false'
        run: |
          echo "Generating PHPCodeSniffer report..."
          DEBUG=1 bin/phpcs --no-cache

      # ------------------------------------------------------------------------------------------------------------------------------------
      - name: Run PHPUnit
        if:   env.SKIP_PHPUNIT == 'false'
        run: |
          echo "Running unit tests..."
          vendor/bin/phpunit --configuration tests --testdox --no-interaction --colors=always

      # ------------------------------------------------------------------------------------------------------------------------------------
