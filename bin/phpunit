#!/bin/bash
#
# Conveniant wrapper for PHPUnit 9. Sets default values and allows switching between multiple PHP and/or PHPUnit versions.
#
# Usage:                 All arguments are optional.
#
#   phpunit [options] [--] [DIRECTORY|SingleTest.php]
#
# Options:               All PHPUnit options are supported, plus the following:
#   --default-format     Use the built-in report format instead of a preconfigured value.
#   --default-printer    Use the built-in report printer instead of a preconfigured value.
#   --full-diff          Display the full diff of failing compare assertions.
#   --stop-on-failure=0  Accepts an additional argument 0 to override a preconfigured value.
#   --color, --no-color  Enforce or disable colored output (default: auto).
#   -h                   Original PHPUnit help.
#
# Short option name/argument separator are zero or more spaces:   e.g. "-cphpunit.xml" or "-c phpunit.xml"
# Long option name/argument separator are space or "=" equal character: e.g. "--configuration directory" or "--configuration=directory"
#
# A custom PHP interpreter can be used by setting the environment variable PHP=<php-binary>.
# A custom PHPUnit executable can be used by setting the environment variable PHPUNIT=<phpunit-binary>.
#
#
# @version 2025.08.15 18:18
#
set -eEuo pipefail

exec 3>&1                                                       # duplicate the original STDOUT


# --- functions ----------------------------------------------------------------------------------------------------------------------------


#
# Print a message to STDERR and exit the script/subshell.
#
# @param $@ - any number of arguments
#
function fail() {
  stderr "ERROR: $*"
  exit 127
}


#
# Print a message to STDERR but don't exit the script/subshell.
#
# @param $@ - any number of arguments
#
function stderr() {
  echo "$@" >&2
}


#
# Read configuration files in isolation and extract the requested variables.
#
# @param _InOut_ $1 - named reference to an associative array holding the resulting configuration
# @param _In_    $2 - named reference to an array holding the configuration files to read
# @param _In_    $@ - any number of variable names to extract from the configuration
#
function readConfig() {
  ((BASH_SUBSHELL)) && fail "${FUNCNAME[0]}() can't write to outer scope from subshell"
  local -n _config="$1"
  local -n _files="$2"
  ((!${#_files[@]})) && fail "${FUNCNAME[0]}() invalid argument '$2' (empty array)"
  shift 2
  ((!"$#")) && fail "${FUNCNAME[0]}() missing variable names (empty)"
  local key value

  while IFS='=' read -r key value; do
    _config["$key"]="$value"
  done < <(
    unset "$@"
    for file in "${_files[@]}"; do
      [[ -f "$file" ]] && source "$file" &> /dev/null
    done
    for var in "$@"; do
      [[ -v "$var" ]] && echo "$var=${!var}"
    done
  )
}


#
# Whether to colorize the output in the current context.
#
function useColors() {
  local color isTerminal=0 isPipe=0

  case "${FORCE_COLOR:-}" in
    always|yes|true|1) color=1;;
    never|no|false|0)  color=0;;
    *)                                                          # lowest priority: auto-detection
      [[ -t 3 && "${TERM:-}" != 'dumb' ]] && isTerminal=1       # whether STDOUT is an interactive and color-capable terminal
      [[ -p /proc/self/fd/3 ]] && isPipe=1                      # whether STDOUT is a pipe
      color=$((isTerminal || isPipe));;
  esac
  [[ -n "${NO_COLOR:-}" ]] && color=0                           # highest priority

  return $((!color))
}


# --- end of functions ---------------------------------------------------------------------------------------------------------------------


# ensure we run Bash v4.3+
((BASH_VERSINFO[0] < 4 || (BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] < 3))) && fail "this script requires Bash version 4.3+"


# resolve the project root directory
declare projectDir
projectDir="$(realpath --relative-to=. "$(dirname "$(realpath "$(type -p "$0")")")"/..)"


# read the configuration
declare -A config; config=()
declare files=("$projectDir/.env.dist" "$projectDir/.env") exportVars=()
readConfig 'config' 'files'  PHP  PHP_COMPOSER_VENDOR_DIR  PHPUNIT  PHPUNIT_STOP_ON_FAILURE  PHPUNIT_REPORT_FORMAT  PHPUNIT_REPORT_PRINTER  PHPUNIT_TEAMCITY_PRINTER  PHPUNIT_TESTDOX_PRINTER  PHPUNIT_EXPORT_VARS

[[ -v PHP                      ]] || PHP="${config[PHP]:-}"
[[ -v PHP_COMPOSER_VENDOR_DIR  ]] || PHP_COMPOSER_VENDOR_DIR="${config[PHP_COMPOSER_VENDOR_DIR]:-}"
[[ -v PHPUNIT                  ]] || PHPUNIT="${config[PHPUNIT]:-}"
[[ -v PHPUNIT_STOP_ON_FAILURE  ]] || PHPUNIT_STOP_ON_FAILURE="${config[PHPUNIT_STOP_ON_FAILURE]:-}"
[[ -v PHPUNIT_REPORT_FORMAT    ]] || PHPUNIT_REPORT_FORMAT="${config[PHPUNIT_REPORT_FORMAT]:-}"
[[ -v PHPUNIT_REPORT_PRINTER   ]] || PHPUNIT_REPORT_PRINTER="${config[PHPUNIT_REPORT_PRINTER]:-}"
[[ -v PHPUNIT_TEAMCITY_PRINTER ]] || PHPUNIT_TEAMCITY_PRINTER="${config[PHPUNIT_TEAMCITY_PRINTER]:-}"
[[ -v PHPUNIT_TESTDOX_PRINTER  ]] || PHPUNIT_TESTDOX_PRINTER="${config[PHPUNIT_TESTDOX_PRINTER]:-}"

IFS=$' \t' read -ra exportVars <<< "${config[PHPUNIT_EXPORT_VARS]:-}"
((${#exportVars[@]})) && {
  readConfig 'config' 'files' "${exportVars[@]}"
  for var in "${exportVars[@]}"; do
    [[ -v "$var" ]] || declare "$var"="${config[$var]:-}"
  done
}


# determine the PHP interpreter to use
declare php="${PHP:-php}" isWindowsPhp
isWindowsPhp="$("$php" -r "echo (int)(PHP_OS_FAMILY == 'Windows');")"
[[ "$projectDir" == /* ]] && ((isWindowsPhp)) && projectDir="$(cygpath -m "$projectDir")"


# resolve the vendor directory
declare vendorDir="$projectDir/${PHP_COMPOSER_VENDOR_DIR:-vendor}"
vendorDir="${vendorDir#./}"


# determine the PHPUnit executable to use
declare phpunit phpunitCmd isExternalPhpunit=0

if [[ -n "$PHPUNIT" ]]; then                                    # a user-specified command
  phpunitCmd="$PHPUNIT"
  phpunit="$(type -p "$PHPUNIT")" || fail "PHPUnit executable not found: $PHPUNIT"
  isExternalPhpunit=1
else
  phpunitCmd='vendor/bin/phpunit'
  phpunit="$vendorDir/bin/phpunit"                              # search vendor directory
  phpunit="${phpunit#./}"
  if [[ ! -f "$phpunit" ]]; then
    phpunitCmd='phpunit' && phpunit="$(type -p phpunit)" || {   # search PATH for: phpunit, phpunit.phar
      phpunitCmd='phpunit.phar' && phpunit="$(type -p phpunit.phar)" || fail "PHPUnit executable not found"
    }
    isExternalPhpunit=1
  fi
fi
((isWindowsPhp)) && phpunit="$(cygpath -m "$phpunit")"


# parse command line arguments
declare -A options; options=()
declare args=() arg


# extract options for default settings
while (("$#")); do
  case "$1" in
    --)                                                         # stop parsing at argument delimiter
      break;;

    --default-format|--teamcity|--testdox)
      [[ -v 'options[--format]' ]] && fail 'multiple report format options detected'
      options[--format]="${1#--default-format}"
      shift
      continue;;

    --default-printer)
      [[ -v 'options[--printer]' ]] && fail 'multiple printer options detected'
      options[--printer]=''
      shift
      continue;;

    --printer|--printer=*)
      [[ -v 'options[--printer]' ]] && fail 'multiple --printer options detected'
      if [[ "$1" == '--printer' ]]; then
        shift
        [[ "$#" -eq 0 || "$1" == -* ]] && fail 'option --printer requires a value'
        options[--printer]="--printer=$1"
      else
        arg="${1#--printer=}"
        [[ -z "$arg" ]] && fail 'option --printer requires a value'
        options[--printer]="$1"
      fi
      shift
      continue;;

    --full-diff)
      [[ -v 'options[--full-diff]' ]] && fail 'multiple --full-diff options detected'
      options[--full-diff]='1'
      shift
      continue;;

    --stop-on-failure|--stop-on-failure=*)
      [[ -v 'options[--stop-on-failure]' ]] && fail 'multiple --stop-on-failure options detected'
      [[ "$1" == '--stop-on-failure' ]] && arg=1 || arg="${1#--stop-on-failure=}"
      [[ "$arg" != [01] ]] && fail 'invalid --stop-on-failure argument (must be 0 or 1)'
      ((arg)) && options[--stop-on-failure]='--stop-on-failure' || options[--stop-on-failure]=''
      shift
      continue;;

    --color)                                                    # standard syntax
      [[ -v 'options[--color]' ]] && fail 'multiple color options detected'
      options[--color]='--colors=always'
      shift
      continue;;

    --no-color)                                                 # standard syntax
      [[ -v 'options[--color]' ]] && fail 'multiple color options detected'
      options[--color]='--colors=never'
      shift
      continue;;

    --colors)                                                   # PHPUnit syntax
      [[ -v 'options[--color]' ]] && fail 'multiple color options detected'
      shift
      if ((!"$#")) || [[ "$1" == -* ]]; then
        options[--color]=''                                     # same as auto
        continue
      fi
      arg="$1"
      shift
      set -- "--colors=$arg" "$@"
      continue;;

    --colors=*)                                                 # PHPUnit syntax
      [[ -v 'options[--color]' ]] && fail 'multiple color options detected'
      arg="${1#--colors=}"
      case "$arg" in
        never|always) options[--color]="--colors=$arg";;
        auto)         options[--color]='';;
        '')           fail "option --colors requires a value";;
        *)            fail 'invalid --colors argument (must be one of "never", "always" or "auto")';;
      esac
      shift
      continue;;
  esac
  (("$#")) && args+=("$1")
  shift
done
args+=("$@")


# set default options
# --configuration
if [[ -v 'options[--configuration]' ]]; then
  file="${options[--configuration]}"
  [[ -z "$file" ]] && fail "option --configuration requires a value"
  [[ -e "$file" ]] || fail "configuration file/directory \"$file\" not found"
  [[ "$file" == /* ]] && ((isWindowsPhp)) && file="$(cygpath -m "$file")"
  options[--configuration]="$file"
else
  declare dir="$projectDir/tests"
  dir="${dir#./}"
  [[ -d "$dir" ]] || fail "directory \"$dir\" not found"
  options[--configuration]="--configuration=$dir"
fi

# --format
if [[ ! -v 'options[--format]' ]]; then
  case "$PHPUNIT_REPORT_FORMAT" in
    teamcity|testdox) options[--format]="--$PHPUNIT_REPORT_FORMAT";;
    '')               options[--format]='';;
    *)                fail 'invalid env variable PHPUNIT_REPORT_FORMAT (must be one of "teamcity" or "testdox")';;
  esac
fi                                        # PHPUnit 9.* bug:
declare format="${options[--format]:-}"   # The --printer option must not be positioned before the report format option. Associative Bash
unset 'options[--format]'                 # arrays do not preserve insertion order. So we extract both options and position them manually.

# --printer
if [[ ! -v 'options[--printer]' ]]; then
  case "$format" in
    '')         [[ -n "$PHPUNIT_REPORT_PRINTER"   ]] && options[--printer]="--printer=$PHPUNIT_REPORT_PRINTER";;
    --teamcity) [[ -n "$PHPUNIT_TEAMCITY_PRINTER" ]] && options[--printer]="--printer=$PHPUNIT_TEAMCITY_PRINTER";;
    --testdox)  [[ -n "$PHPUNIT_TESTDOX_PRINTER"  ]] && options[--printer]="--printer=$PHPUNIT_TESTDOX_PRINTER";;
  esac
fi
declare printer="${options[--printer]:-}"
unset 'options[--printer]'

# --full-diff
if [[ -v 'options[--full-diff]' ]]; then
  export PHPUNIT_FULL_DIFF='1'
  unset 'options[--full-diff]'
fi

# --stop-on-failure
if [[ ! -v 'options[--stop-on-failure]' ]]; then
  [[ "${PHPUNIT_STOP_ON_FAILURE:-0}" != "0" ]] && options[--stop-on-failure]='--stop-on-failure'
fi

# --color: PHP can't resolve it correctly
if [[ -z "${options[--color]:-}" ]]; then
  useColors && options[--color]='--colors=always' || options[--color]='--colors=never'
fi


# rebuild all arguments
args=("${options[@]}" "$format" "$printer" "${args[@]+"${args[@]}"}")
set -- "${args[@]}"


# export vars
((${#exportVars[@]})) && export "${exportVars[@]}"


# on DEBUG: show the final command
if [[ "${DEBUG:-0}" != "0" ]]; then
  declare phpBin=''
  [[ "$php" != 'php' ]] && phpBin="$php "
  echo "CMD: ${phpBin}${phpunit} $*"
fi


# call PHPUnit
"$php" "$phpunit" "$@"

exit $?
