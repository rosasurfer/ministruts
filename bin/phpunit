#!/bin/bash
#
# Conveniant wrapper of PHPUnit. Sets default values and allows switching between multiple PHP and/or PHPUnit versions.
#
# Usage:                 All arguments are optional.
#   phpunit [options] [--] [DIRECTORY|SingleTest.php]
#
# Options:               All PHPUnit options are supported, plus the following:
#   --default-format     Reset a preconfigured report format.
#   --default-printer    Reset a preconfigured report format printer.
#   --full-diff          Display the full diff of failing comparisons (requires a TestCase extension).
#   --color, --no-color  Enforce or disable colored output (default: auto).
#   -h                   Original PHPUnit help.
#
# Short option name/argument separator are zero or more spaces:   e.g. "-cphpunit.xml" or "-c phpunit.xml"
# Long option name/argument separator are space or "=" equal character: e.g. "--configuration directory" or "--configuration=directory"
#
# A custom PHP interpreter can be used by setting the environment variable PHP='<php-binary>'.
# A custom PHPUnit executable can be used by setting the environment variable PHPUNIT='<phpunit-binary>'.
#
#
# TODO:
#  - use a configurable custom printer, reset with --default-printer    --printer klas\\tests\\helper\\CliTestDoxPrinter
#
# @version 2025.07.28 22:37
#
set -eEuo pipefail

exec 3>&1                                                       # duplicate the original STDOUT


# --- functions ----------------------------------------------------------------------------------------------------------------------------

#
# Print a message to STDERR and exit the script/subshell.
#
# @param $@ - any number of arguments
#
function fail() {
  stderr "ERROR: $*"
  exit 127
}

#
# Print a message to STDERR but don't exit the script/subshell.
#
# @param $@ - any number of arguments
#
function stderr() {
  echo "$@" >&2
}

#
# Read configuration files in isolation and extract the requested variables.
#
# @param _InOut_ $1 - named reference to an associative array holding the resulting configuration
# @param _In_    $2 - named reference to an array holding the configuration files to read
# @param _In_    $@ - any number of config variables to read
#
function readConfig() {
  local -n _config_="$1"                                        # these two names must not appear in outer scopes
  local -n _files_="$2"
  shift 2
  unset "$@"
  local key value

  while IFS='=' read -r key value; do
    _config_["$key"]="$value"
  done < <(
    for file in "${_files_[@]}"; do
      [[ -f "$file" ]] && . "$file" &> /dev/null
    done
    for var in "$@"; do
      [[ -v "$var" ]] && echo "$var=${!var}"
    done
  )
}

#
# Whether to colorize the output in the current context.
#
function useColors() {
  local color isTerminal=0 isPipe=0

  case "${FORCE_COLOR:-}" in
    always|yes|true|1) color=1;;
    never|no|false|0)  color=0;;
    *)                                                          # lowest priority: auto-detection
      [[ -t 3 && "${TERM:-}" != 'dumb' ]] && isTerminal=1       # whether STDOUT is an interactive and color-capable terminal
      [[ -p /proc/self/fd/3 ]] && isPipe=1                      # whether STDOUT is a pipe
      color=$((isTerminal || isPipe));;
  esac
  [[ -n "${NO_COLOR:-}" ]] && color=0                           # highest priority

  return $((!color))
}

# --- end of functions ---------------------------------------------------------------------------------------------------------------------


# determine the PHP interpreter to use
declare php="${PHP:-php}"


# resolve the project root directory
declare isWindowsPhp projectDir
isWindowsPhp="$("$php" -r "echo (int)(PHP_OS_FAMILY == 'Windows');")"
projectDir="$(realpath --relative-to=. "$(dirname "$(realpath "$(type -p "$0")")")"/..)"
[[ "$projectDir" == /* ]] && ((isWindowsPhp)) && projectDir="$(cygpath -m "$projectDir")"


# read the configuration
declare -A config; config=()
declare files=("$projectDir/.env.dist" "$projectDir/.env")
readConfig 'config' 'files' PHP_COMPOSER_VENDOR_DIR  PHPUNIT_REPORT_FORMAT  PHPUNIT_TESTDOX_PRINTER

[[ -v PHP_COMPOSER_VENDOR_DIR ]] || PHP_COMPOSER_VENDOR_DIR="${config[PHP_COMPOSER_VENDOR_DIR]:-}"
[[ -v PHPUNIT_REPORT_FORMAT   ]] || PHPUNIT_REPORT_FORMAT="${config[PHPUNIT_REPORT_FORMAT]:-}"
[[ -v PHPUNIT_TESTDOX_PRINTER ]] || PHPUNIT_TESTDOX_PRINTER="${config[PHPUNIT_TESTDOX_PRINTER]:-}"


# resolve the vendor directory
declare vendorDir="$projectDir/${PHP_COMPOSER_VENDOR_DIR:-vendor}"
vendorDir="${vendorDir#./}"


# determine the PHPUnit executable to use
declare PHPUNIT="${PHPUNIT:-}" phpunit phpunitCmd isExternalPhpunit=0

if [[ -n "$PHPUNIT" ]]; then                                    # a user-specified command
  phpunitCmd="$PHPUNIT"
  phpunit="$(type -p "$PHPUNIT")" || fail "PHPUnit executable not found: $PHPUNIT"
  isExternalPhpunit=1
else
  phpunitCmd='vendor/bin/phpunit'
  phpunit="$vendorDir/bin/phpunit"                              # search vendor directory
  phpunit="${phpunit#./}"
  if [[ ! -f "$phpunit" ]]; then
    phpunitCmd='phpunit' && phpunit="$(type -p phpunit)" || {   # search PATH for: phpunit, phpunit.phar
      phpunitCmd='phpunit.phar' && phpunit="$(type -p phpunit.phar)" || fail "PHPUnit executable not found"
    }
    isExternalPhpunit=1
  fi
fi
((isWindowsPhp)) && phpunit="$(cygpath -m "$phpunit")"


# parse command line arguments
declare args=() arg
declare -A options
options=()


# extract options for default settings
while (("$#")); do
  case "$1" in
    --)                                                         # stop parsing at argument delimiter
      break;;

    --teamcity|--testdox)
      [[ -v options['--report-format'] ]] && fail 'multiple report format options detected'
      options['--report-format']="$1"
      shift
      continue;;

    --default-format)
      [[ -v options['--report-format'] ]] && fail 'multiple report format options detected'
      options['--report-format']=''
      shift
      continue;;

    --full-diff)
      [[ -v options['--full-diff'] ]] && fail 'multiple --full-diff options detected'
      options['--full-diff']='1'
      shift
      continue;;

    --color)                                                    # standard syntax
      [[ -v options['--color'] ]] && fail 'multiple color options detected'
      options['--color']='--colors=always'
      shift
      continue;;

    --no-color)                                                 # standard syntax
      [[ -v options['--color'] ]] && fail 'multiple color options detected'
      options['--color']='--colors=never'
      shift
      continue;;

    --colors)                                                   # PHPUnit syntax
      [[ -v options['--color'] ]] && fail 'multiple color options detected'
      shift
      if ((!"$#")) || [[ "$1" == -* ]]; then
        options['--color']=''                                   # same as auto
        continue
      fi
      arg="$1"
      shift
      set -- "--colors=$arg" "$@"
      continue;;

    --colors=*)                                                 # PHPUnit syntax
      [[ -v options['--color'] ]] && fail 'multiple color options detected'
      arg="${1#--colors=}"
      case "$arg" in
        never|always) options['--color']="--colors=$arg";;
        auto)         options['--color']='';;
        '')           fail "option --colors requires a value";;
        *)            fail 'invalid --colors argument (must be one of "never", "always" or "auto")';;
      esac
      shift
      continue;;
  esac
  (("$#")) && args+=("$1")
  shift
done
args+=("$@")


# set default options
# --configuration
if [[ -v options['--configuration'] ]]; then
  file="${options[--configuration]}"
  [[ -z "$file" ]] && fail "option --configuration requires a value"
  [[ -e "$file" ]] || fail "configuration file/directory \"$file\" not found"
  [[ "$file" == /* ]] && ((isWindowsPhp)) && file="$(cygpath -m "$file")"
  options['--configuration']="$file"
else
  declare dir="$projectDir/tests"
  dir="${dir#./}"
  [[ -d "$dir" ]] || fail "directory \"$dir\" not found"
  options['--configuration']="--configuration=$dir"
fi

# --report-format
if [[ ! -v options['--report-format'] ]]; then
  declare format="${PHPUNIT_REPORT_FORMAT:-}"
  case "$format" in
    teamcity|testdox) options['--report-format']="--$format";;
    '')               ;;
    *)                fail 'invalid env variable PHPUNIT_REPORT_FORMAT (must be one of "teamcity" or "testdox")';;
  esac
fi

# --full-diff
if [[ -v options['--full-diff'] ]]; then
  export PHPUNIT_FULL_DIFF='1'
  unset 'options[--full-diff]'
fi

# --color (PHP can't resolve it correctly)
if [[ -z "${options['--color']:-}" ]]; then
  useColors && options['--color']='--colors=always' || options['--color']='--colors=never'
fi


# rebuild all arguments
args=("${options[@]}" "${args[@]+"${args[@]}"}")
set -- "${args[@]}"


# on DEBUG: show the final command
if [[ "${DEBUG:-0}" != "0" ]]; then
  declare phpBin=''
  [[ "$php" != 'php' ]] && phpBin="$php "
  echo "CMD: ${phpBin}${phpunit} $*"
fi


# call PHPUnit
"$php" "$phpunit" "$@"

exit $?
