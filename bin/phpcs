#!/bin/bash
#
# Conveniant wrapper of PHPCodeSniffer. Simplifies switching between PHP/PHPCS versions and configurations.
#
# PHPCS can be executed using a custom PHP interpreter by setting the environment variable PHP='<php-cmd>'.
#
# Examples:
#  PHP=php81 phpcs                          # Use a different PHP version instead of the standard `php`.
#
set -eEuo pipefail

# --- functions ----------------------------------------------------------------------------------------------------------------------------

#
# Print a message to STDERR and exit the script/subshell.
#
# @param $@ - any number of arguments
#
function fail() {
  stderr "ERROR: $*"
  exit 127
}

#
# Print a message to STDERR but don't exit the script/subshell.
#
# @param $@ - any number of arguments
#
function stderr() {
  echo "$@" >&2
}

#
# Resolve the color setting to apply if no color-specific command line options are supplied.
#
# @param _InOut_ $1 - named reference to the default and resolved value
#
function resolveColorSetting() {
  ((BASH_SUBSHELL)) && fail "${FUNCNAME[0]}() can't write to outer scope from subshell"
  local -n inout="$1"

  case "$inout" in
    on)   # enable color as long as not explicitly disabled
      [[ -n "${NO_COLOR:-}" ]] && inout='off';;

    off)  # disable color as long as not explicitly enabled
      [[ -z "${NO_COLOR:-}" && -n "${FORCE_COLOR:-}" && "$FORCE_COLOR" != '0' ]] && inout='on';;

    auto) # determine setting depending on the runtime environment
      local isTerminal=0 isPipe=0 localColor
      [[ -t 1 ]] && isTerminal=1                    # inspect STDOUT
      [[ -p /proc/self/fd/1 ]] && isPipe=1
      ((isTerminal || isPipe)) && localColor='on' || localColor='off'
      resolveColorSetting 'localColor'              # recurse to inspect environment (must not use the same var as in global)
      inout="$localColor";;

    *)
      fail "${FUNCNAME[0]}() invalid color status \"$inout\"";;
  esac
  :                                                 # make sure the last command returns with success
}

# --- end of functions ---------------------------------------------------------------------------------------------------------------------


# determine the PHP interpreter to use
declare php="${PHP:-php}"


# resolve project root and config directory
declare isWindowsPhp projectDir configDir
isWindowsPhp="$("$php" -r "echo (int)(PHP_OS_FAMILY == 'Windows');")"
projectDir="$(realpath --relative-to=. "$(dirname "$(realpath "$(type -p "$0")")")"/..)"
[[ "$projectDir" == /* ]] && ((isWindowsPhp)) && projectDir="$(cygpath -m "$projectDir")"
configDir="$projectDir/etc/phpcs"
configDir="${configDir#./}"


# determine the PHPCS executable to use
declare phpcs="$projectDir/vendor/bin/phpcs"
phpcs="${phpcs#./}"
[[ -f "$phpcs" ]] || fail "PHPCS executable not found"


declare args=() arg showCmd=0
declare -A options
options=()

# parse arguments
while (("$#")); do
  case "$1" in
    --standard|--standard=*)
      arg="${1#--standard}"
      [[ -n "${options['--standard']:-}" ]] && fail 'multiple --standard options detected'
      [[ -z "$arg" || "$arg" == '=' ]] && fail 'missing value for option --standard=<name-or-file>'
      options['--standard']="--standard=$arg"
      shift
      continue;;

    --color|--colors)
      options['--color']='--colors'
      shift
      continue;;

    --no-color|--no-colors)
      options['--color']='--no-colors'
      shift
      continue;;

    --show-cmd)
      showCmd=1
      shift
      continue;;
  esac
  args+=("$1")
  shift
done


# prepend the standard to use
if [[ -z "${options['--standard']:-}" ]]; then
  defaultRules="$configDir/slevomat.xml"
  [[ -f "$defaultRules" ]] || fail "file not found \"$defaultRules\""
  options['--standard']="--standard=$defaultRules"
fi
args=("${options['--standard']}" "${args[@]}")


# prepend a color option
if [[ -z "${options['--color']:-}" ]]; then
  declare color='auto'                          # resolve the current default
  resolveColorSetting 'color'
  [[ "$color" == 'on'  ]] && options['--color']='--colors'
  [[ "$color" == 'off' ]] && options['--color']='--no-colors'
fi
args=("${options['--color']}" "${args[@]}")


# rebuild all arguments
set -- "${args[@]}"


# show the final command
if ((showCmd)); then
  [[ "$php" == 'php' ]] && phpBin='' || phpBin="$php "
  echo "CMD: ${phpBin}${phpcs} $*"
fi


# call PHPCS
"$php" "$phpcs" "$@"
