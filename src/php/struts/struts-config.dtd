<!--
     DTD for the Struts configuration file of the application
     ========================================================
     
     To enable validation of the configuration file against this DTD you have multiple options:
     
     • Include the following DOCTYPE element at the beginning of your file (after the "xml" declaration):
         <!DOCTYPE struts-config SYSTEM "struts-config.dtd">
       and load the file into your xml parser with the DTD file in the current working directory.
        
     • Modify the content of the xml file on-the-fly and point the DTD location of the DOCTYPE element to an 
       existing copy of this DTD. This might be an URL to an external DTD or a relative path to a local DTD. 
       
     • Modify the content of the xml file on-the-fly and include the DTD in the document structure of the xml. 
-->


<!-- ========== Defined Types ====================================================================================== -->


<!-- A "Boolean" is the string representation of a boolean (true or false) variable.
-->

<!ENTITY % Boolean "(true|false)">


<!-- A "ClassName" is the simple name of a PHP class that is instantiated to provide the functionality of the enclosing 
     element.
-->
<!ENTITY % ClassName "CDATA">


<!-- A "LogicalName" is the logical name used to reference an element. It must begin with a letter and contain only 
     characters that are legal for PHP identifiers.
-->
<!ENTITY % LogicalName "CDATA">


<!-- A "RequestPath" is a module-relative URI path, beginning with a slash "/", that identifies a mapped resource within 
     this web application.
-->
<!ENTITY % RequestPath "CDATA">


<!-- A "ResourcePath" is a relative path, delimited by slash "/" characters, that defines the location of a resource 
     relative to the location of the Struts configuration file itself.
-->
<!ENTITY % ResourcePath "CDATA">



<!-- ========== Top Level Elements ================================================================================= -->


<!-- The "struts-config" element is the root of the configuration file hierarchy, and contains nested elements for all 
     of the other configuration settings.

     view-base  Comma-delimited list of directories to lookup views (templates, layouts, tiles, partials etc). Values 
                may be absolute or relative to the APPLICATION_ROOT directory.
                [default: "app/view"]
-->
<!ELEMENT struts-config (global-forwards?, action-mappings, tiles?, controller?)>
<!ATTLIST struts-config
          view-base      %ResourcePath;    #IMPLIED
>


<!-- The "global-forwards" element describes a set of ActionForward objects that are available to all Action objects as 
     a return value. The individual ActionForwards are configured through nested <forward> elements. An <action> element 
     may override a global forward by defining a local <forward> of the same name.
-->
<!ELEMENT global-forwards (forward*)>


<!-- The "forward" element describes an ActionForward. An ActionForward has a logical name and describes an URI, a file 
     or a tiles definition. A "forward" element may be used for both global and local forward definitions. Global
     forwards are available to all actions of the module. Local forwards are nested within a <mapping> element and are 
     available only to the action invoked through that ActionMapping.

     name       The unique identifier for the forward. Used at runtime to select - by its logical name - the resource 
                that should complete the request/response.

     include    The name of a tiles definition or a file to include. Tiles definition names must start with a dot ".", 
                file names must not start with a dot ".". Exactly one of "include", "redirect" or "forward" must be 
                specified.

     redirect   The module-relative path of the location to which a redirect instruction should be issued. Exactly one 
                of "include", "redirect" or "forward" must be specified.

     forward    The name of another local or global ActionForward to use instead (local forwards are preferred).  
                Exactly one of "include", "redirect" or "forward" must be specified.
-->
<!ELEMENT forward (set-property*)>
<!ATTLIST forward
          name          %LogicalName;   #REQUIRED
          include       %ResourcePath;  #IMPLIED
          redirect      %RequestPath;   #IMPLIED
          forward       %LogicalName;   #IMPLIED
>


<!-- The "action-mappings" element describes a set of ActionMapping objects that are available to process requests 
     matching the given url-pattern. Individual ActionMappings are configured through nested <mapping> elements.
-->
<!ELEMENT action-mappings (mapping+)>


<!-- The "mapping" element describes an ActionMapping object that is to be used to process a request for a specific 
     module-relative URI. The following attributes are defined:

     path       The module-relative path of the submitted request, starting with a slash "/" character.

     include    The name of a tiles definition or file to include, instead of passing the request to an action. Tiles 
                definition names must start with a dot ".", file names must not start with a dot ".". Not valid if the 
                "action" attribute is specified. Only one of "include", "redirect" or "forward" can be specified.

     redirect   The module-relative path of the location to which a redirect instruction should be issued, instead of 
                passing the request to an action. Not valid if the "action" attribute is specified. Only one of 
                "include", "redirect" or "forward" can be specified.

     forward    The name of a global ActionForward to forward control to, instead of passing the request to an action.  
                Not valid if the "action" attribute is specified. Only one of "include", "redirect" or "forward" can be 
                specified.

     action     Class name of the [Action] subclass that will process requests for the action mapping. Not valid if the 
                "include", "redirect" or "forward" attribute is specified.

     form       Class name of the [ActionForm] subclass, if any, that is associated with the mapping.

     scope      The context ("request" or "session") that is used to store and access the ActionForm, if any. Optional 
                if the "form" attribute is specified, else not valid.
                [default: "request"]

     validate   Valid only if the "form" attribute is specified. Set to "true" if the ActionForm should be validated 
                prior to calling the Action object, or set to "false" if you don't want validation at that time. The 
                default behaviour is "false" when an action object or a forward (include, redirect, forward) is 
                specified, and "true" when no action object and no forward are configured. This means if an action is 
                configured, per default the action is responsible for input validation. If no action and no forward are 
                configured, per default the framework validates user input. For this to work you must configure two 
                nested action forwards named "success" and "error".

     methods    Comma-delimited list of HTTP method names ("get", "post") the ActionMapping is supporting.
                [default: "get"]

     roles      Comma-delimited list of required roles to access the action mapping.
                [default: "none"]

     default    Set to "true" if the mapping should be configured as the default action mapping for the module. If a 
                request does not match any other mapping, it will be passed to the action mapping with default set to 
                "true". Only one action mapping can be marked as "default" within a module.
                [default: "false"]
-->
<!ELEMENT mapping (set-property*, forward*)>
<!ATTLIST mapping
          path          %RequestPath;                 #REQUIRED
          include       %ResourcePath;                #IMPLIED
          redirect      %RequestPath;                 #IMPLIED
          forward       %LogicalName;                 #IMPLIED
          action        %ClassName;                   #IMPLIED
          form          %ClassName;                   #IMPLIED
          scope         (request|session)             "request"
          validate      %Boolean;                     "true"
          methods       CDATA                         "get"
          roles         CDATA                         #IMPLIED
          default       %Boolean;                     "false"
>


<!-- The "tiles" element describes the set of available Tiles objects. Individual tiles are configured through nested 
     <tile> elements.
-->
<!ELEMENT tiles (tile*)>


<!-- The "tile" element describes a single Tile that can be inserted in a page. It is identified by its logical name.

     name       The unique identifier for this tile.

     path       The path of the file used as tile relative to the "view-base" directory of the application. Exactly one 
                of "path" or "extends" must be specified.

     extends    Name of a tile that is used as ancestor of this tile. Tiles definition names must start with a dot ".".  
                All attributes from the ancestor are available to the new tile. Any attribute inherited from the 
                ancestor can be overwritten by providing a new value. Exactly one of "path" or "extends" must be 
                specified.
-->
<!ELEMENT tile (set*)>
<!ATTLIST tile
          name      %LogicalName;   #REQUIRED
          path      %ResourcePath;  #IMPLIED
          extends   %LogicalName;   #IMPLIED
>


<!-- The "set" element describes an additional property passed to a tiles definition. The value of this property can be 
     specified as an xml attribute or in the body of the <set> tag.

     name       The unique identifier for this property.

     type       The type of the passed value. Can be "string" or "resource". If a type is specified it will be used to 
                process the value. If no type is specified and a resource with a name matching the attribute value of 
                the property is found, the type "resource" is used. Otherwise the type "string" is used.

     value      The value of the property. The value can be specified as an xml attribute, or in the body of the <set> 
                tag.
-->
<!ELEMENT set (#PCDATA)>
<!ATTLIST set
          name      %LogicalName;       #REQUIRED
          type      (string|resource)   "resource"
          value     CDATA               #IMPLIED
>


<!-- The "controller" element describes FrontController related settings.

     request-processor  Class name of the RequestProcessor subclass that will perform request processing for the module.
                        [default: "RequestProcessor"]

     role-processor     Class name of the [RoleProcessor] subclass that will perform role checking for the module.
                        [default: "none"]
-->
<!ELEMENT controller EMPTY>
<!ATTLIST controller
          request-processor   %ClassName;    #IMPLIED
          role-processor      %ClassName;    #IMPLIED
>


<!-- ========== Subordinate Elements =============================================================================== -->


<!-- The "set-property" element specifies the method name and initial value of an additional class configuration 
     property. When the object representing the surrounding element is instantiated, the accessor for the indicated 
     property is called and passed the indicated value. The "set-property" element is especially useful when a custom 
     subclass is used with <forward> or <mapping> elements. The subclass can be passed whatever other properties may be 
     required to configure the object without changing how the struts-config is parsed.

     property   Name of the class property whose setter method will be called.

     value      String representation of the value to which this property will be set, after suitable type conversion.
-->
<!ELEMENT set-property EMPTY>
<!ATTLIST set-property
          property      %LogicalName;   #REQUIRED
          value         CDATA           #REQUIRED
>
