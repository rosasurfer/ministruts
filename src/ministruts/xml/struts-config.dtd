<!--

                                     DTD for the Struts configuration of the application
                                    =====================================================


   Struts 1.x general design and overview:  http://en.wikipedia.org/wiki/Apache_Struts_1
-->


<!-- ====== Type Definitions ============================================================================================ -->


<!--
   A "Boolean" is the string representation of a boolean variable ('true' or 'false').
-->
<!ENTITY % Boolean "(true|false)">


<!--
   A "ClassName" is the name of a PHP class that is instantiated to provide the functionality of the enclosing element.
-->
<!ENTITY % ClassName "CDATA">


<!--
   A "LogicalName" is the logical name used to reference an element.
-->
<!ENTITY % LogicalName "CDATA">


<!--
   A "RequestPath" is a module-relative URI path beginning with a slash "/" that identifies a mapped resource within the web
   application.
-->
<!ENTITY % RequestPath "CDATA">


<!--
   A "ResourcePath" is the relative location of a file system resource or a logical name pointing to another resource.
-->
<!ENTITY % ResourcePath "CDATA">



<!-- ====== Element Definitions ========================================================================================= -->


<!--
   The "struts-config" element is the root of the configuration file and contains nested elements for all of the other
   configuration settings.

   file-base  Comma-delimited list of paths to lookup referenced files or file system locations (templates, layouts, 
              fragments etc). Values may be absolute or relative to the application root directory. Each module can have its 
              own list of "file-base" locations.
              [default: The application-wide configured view directory or "app/view"]
-->
<!ELEMENT struts-config (global-forwards?, action-mappings, tiles?, controller?)>
<!ATTLIST struts-config
          file-base    %ResourcePath;    #IMPLIED
>


<!--
   The "global-forwards" element describes a set of ActionForward objects that are available to all Action objects as a
   return value. The individual ActionForwards are configured through nested "forward" elements. A "mapping" element may
   override a global forward by defining a local (i.e. nested) "forward" element of the same name.
-->
<!ELEMENT global-forwards (forward*)>
<!ATTLIST global-forwards
>


<!--
   The "forward" element describes an ActionForward. An ActionForward has a logical name and describes an URI, a file or a
   tiles definition. A "forward" element may be used for both global and local forward definitions. Global forwards are
   available to all mappings of the module. Local forwards are nested within a "mapping" element and are available only to
   the action invoked through that mapping.

   name       The unique identifier of the forward. Used to select the resource that should complete the request/response.
              
   include    The name of a tiles definition or a file to include. Tiles definition names must start with a dot ".", file
              names must not start with a dot ".". Exactly one of "include", "redirect" or "alias-for" must be specified.
              
   redirect   The module-relative URI to which a redirect instruction should be issued. Exactly one of "include", "redirect" 
              or "alias-for" must be specified.
              
   alias-for  The name of another "forward" element to use instead of the current one (local forwards are preferred over
              global ones). Exactly one of "include", "redirect" or "alias-for" must be specified.
-->
<!ELEMENT forward (set-property*)>
<!ATTLIST forward
          name         %LogicalName;     #REQUIRED
          include      %ResourcePath;    #IMPLIED
          redirect     %RequestPath;     #IMPLIED
          alias-for    %LogicalName;     #IMPLIED
>


<!--
   The "action-mappings" element describes a set of ActionMapping objects that are available to process requests matching the
   given URL pattern. Individual ActionMappings are configured through nested "mapping" elements.
-->
<!ELEMENT action-mappings (mapping+)>
<!ATTLIST action-mappings
>


<!--
   The "mapping" element describes an ActionMapping object that is to be used to process a request for a specific
   module-relative URI. The following attributes are defined:

   path                 The module-relative path of the request, starting with a slash "/" character.

   include              The name of a tiles definition or a file to include, instead of passing the request to an action.
                        Tiles definition names must start with a dot ".", file names must not start with a dot. Not valid if 
                        the "action" attribute is specified. Only one of "include", "redirect" or "forward" can be specified.

   redirect             The module-relative path of the location to which a redirect instruction should be issued, instead
                        of passing the request to an action. Not valid if the "action" attribute is specified. Only one of
                        "include", "redirect" or "forward" can be specified.

   forward              The name of a global "forward" element to forward control to, instead of passing the request to an
                        action. Not valid if the "action" attribute is specified. Only one of "include", "redirect" or
                        "forward" can be specified.

   action               Class name of an Action subclass that will process requests for action mapping. Not valid if the
                        "include", "redirect" or "forward" attribute is specified.

   form                 Class name of an ActionForm subclass, if any, that is associated with the mapping.

   form-scope           The context ("request" or "session") that is used to store and access the ActionForm, if any.
                        Optional if the "form" attribute is specified, else not valid.
                        [default: "request"]

   form-validate-first  Valid only if the "form" attribute is specified. Set to "true" if the ActionForm should be validated
                        prior to calling the Action object, or set to "false" if you don't want validation at that time. The
                        default behaviour is "false" if an action object or a forward (include, redirect, forward) are
                        configured, and "true" if no action object and no forward are configured.
                        This means per default a configured action is responsible for input validation. If neither an action
                        nor a forward are configured the framework will perform input validation. For validation by the
                        framework two nested "forward" elements named "success" and "error" must be configured.

   http-methods         Comma-delimited list of HTTP method verbs ("get", "post") the action mapping supports.
                        [default: "get"]

   roles                Comma-delimited list of required roles to access the action mapping.
                        [default: "none"]

   default              Set to "true" if the mapping should be configured as the default action mapping for the module. If a
                        request does not match any other mapping, it will be passed to the action mapping with the "default"
                        attribute set to "true". Only one mapping can be marked as "default" within a module.
                        [default: "false"]
-->
<!ELEMENT mapping ((forward*, set-property*)*)>
<!ATTLIST mapping
          path                   %RequestPath;        #REQUIRED
          include                %ResourcePath;       #IMPLIED
          redirect               %RequestPath;        #IMPLIED
          forward                %LogicalName;        #IMPLIED
          action                 %ClassName;          #IMPLIED
          form                   %ClassName;          #IMPLIED
          form-scope             (request|session)    "request"
          form-validate-first    %Boolean;            "true"
          http-methods           CDATA                "get"
          roles                  CDATA                #IMPLIED
          default                %Boolean;            "false"
>


<!--
   The "tiles" element describes the set of available Tiles objects. Individual tiles are configured through nested "tile"
   elements.
-->
<!ELEMENT tiles (tile*)>
<!ATTLIST tiles
>


<!--
   The "tile" element describes a single Tile that can be inserted in a page. It is identified by its logical name.

   name          The unique identifier for this tile. Tile names must start with a dot ".". It is recommended to name tile
                 template definitions (partals/layouts which must be etxended) and tile view definitions (partials which are
                 ready to be inserted) differently, e.g. templates as ".{name}.tpl" and insertables as ".{name}".

   file          The path of the file to insert relative to the "file-base" location of the module. Exactly one of "file",
                 "extends-tile" or "alias-for" must be specified.

   extends-tile  Name of a tile that is used as ancestor of this tile. Tile names must start with a dot ".". All attributes
                 from the ancestor are available to the new tile. Any attribute inherited from the ancestor can be
                 overwritten by providing a new value. Exactly one of "file", "extends-tile" or "alias-for" must be
                 specified.

   alias-for     Name of another tile that this tile's name is an alias for. Tile names must start with a dot ".". If this
                 attribute is set the tile can not have child elements. Exactly one of "file", "extends-tile" or "alias-for" 
                 must be specified.
-->
<!ELEMENT tile ((set*, set-property*)*)>
<!ATTLIST tile
          name            %LogicalName;     #REQUIRED
          file            %ResourcePath;    #IMPLIED
          extends-tile    %LogicalName;     #IMPLIED
          alias-for       %LogicalName;     #IMPLIED
>


<!--
   The "set" element describes a resource to insert into a tile, i.e. a page fragment or another tile.

   name     Name of the variable under which the resource is made available in the resulting view. 

   include  The name of a tiles definition or a file to include. Tile names must start with a dot ".", file names must not 
            start with a dot. All properties from the surrounding tile are also available to the inserted element. Any 
            property inherited from the surrounding tile can be overwritten by providing a new value. However, this will not 
            modify the value of the original property in the surrounding tile.
            If this attribute is omitted the tile containing the "set" element is marked as a template which can be extended 
            but cannot be rendered independently.
-->
<!ELEMENT set EMPTY>
<!ATTLIST set
          name       %LogicalName;     #REQUIRED
          include    %ResourcePath;    #IMPLIED
>


<!--
   The "set-property" element describes an additional property available in a class or a definition. The value of this
   property can be specified as an XML attribute or in the body of the <set-property> tag.
   The "set-property" element is especially useful with "tiles" elements where the property is made available as a regular
   variable in the page context. The element is also useful when a custom class is used with "forward" or "mapping" elements.
   When the object representing the surrounding element is instantiated, the setter for the property is called and passed
   the specified value.

   property  Name of the variable or property whose setter method will be called.

   value     String representation of the value of the variable or property. The value can be specified as an XML attribute,
             or in the body of the <set-property> tag.
-->
<!ELEMENT set-property (#PCDATA)>
<!ATTLIST set-property
          name     %LogicalName;    #REQUIRED
          value    CDATA            #IMPLIED
>


<!--
   The "controller" element describes controller related settings.

   request-processor  Class name of the RequestProcessor subclass that will perform request processing for the module.
                      [default: "RequestProcessor"]

   role-processor     Class name of the RoleProcessor subclass that will perform role checking for the module.
                      [default: "none"]
-->
<!ELEMENT controller EMPTY>
<!ATTLIST controller
          request-processor    %ClassName;    #IMPLIED
          role-processor       %ClassName;    #IMPLIED
>
